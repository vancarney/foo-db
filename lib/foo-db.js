// Generated by CoffeeScript 1.6.2
var ArrayCollection, global, _;

global = typeof exports !== "undefined" && exports !== null ? exports : window;

if (typeof exports !== 'undefined') {
  _ = require('underscore')._;
  ArrayCollection = require('js-arraycollection').ArrayCollection;
}

(function() {
  'use strict';
  var FooDB;

  if (!global.FooDB) {
    return FooDB = global.FooDB = FooDB = (function() {
      FooDB.prototype.__collection = new ArrayCollection([]);

      function FooDB(data) {
        var _this = this;

        _.extend(this, Events);
        if ((data != null) && data.length) {
          this.__collection.addAll(data);
        }
        this.__collection.on('collectionChange', function(data) {
          return _this.trigger('collectionChange', data);
        });
      }

      FooDB.prototype.create = function(obj) {
        if (!obj) {
          return null;
        }
        return this.__collection.addItem(_.extend(obj, {
          objectId: _.uniqueId()
        }));
      };

      FooDB.prototype.read = function(where) {
        if ((where != null)) {
          return _.where(this.__collection.__list, {
            objectId: id
          });
        } else {
          return this.__collection.__list;
        }
      };

      FooDB.prototype.update = function(id, obj) {
        if (!id) {
          return null;
        }
        return _.extend(this.read({
          objectId: id
        }), obj);
      };

      FooDB.prototype.destroy = function(id) {
        var idx, ref;

        if (((ref = this.read({
          objectId: id
        })) != null) && ((idx = this.__collection.getItemIndex(ref)) != null)) {
          return this.__collection.removeItemAt(idx);
        }
      };

      return FooDB;

    })();
  }
}).call(this);
